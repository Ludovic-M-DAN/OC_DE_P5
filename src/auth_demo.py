#!/usr/bin/env python3
"""
D√©monstration des diff√©rents niveaux d'acc√®s utilisateurs MongoDB pour OC P5.

Ce script montre comment les diff√©rents utilisateurs cr√©√©s par setup_auth.py
peuvent acc√©der aux donn√©es avec leurs permissions respectives :

- admin : acc√®s complet (via Docker env vars)
- migration_user : lecture/√©criture pour migration
- readonly_user : lecture seule pour analyses
- healthcare_user : acc√®s limit√© pour applications cliniques

Utilisation :
    python src/auth_demo.py

Pr√©requis :
    - MongoDB en cours d'ex√©cution
    - Utilisateurs cr√©√©s via python src/setup_auth.py
    - Donn√©es migr√©es via python src/migrate.py
"""

import logging
import os
import sys
from pymongo import MongoClient
from pymongo.errors import PyMongoError, OperationFailure


def setup_logging() -> None:
    """Configurer le logging pour la d√©monstration."""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )


def get_env(name: str, default: str) -> str:
    """Lire une variable d'environnement."""
    value = os.getenv(name)
    return value if value not in (None, "") else default


def create_user_client(username: str, password: str) -> MongoClient:
    """Cr√©er un client MongoDB pour un utilisateur sp√©cifique."""
    host = get_env("MONGO_HOST", "localhost")
    port = get_env("MONGO_PORT", "27017")

    uri = f"mongodb://{username}:{password}@{host}:{port}/healthcare_db"
    return MongoClient(uri, serverSelectionTimeoutMS=5000)


def demo_admin_access() -> None:
    """D√©monstration de l'acc√®s admin (utilise les variables d'environnement Docker)."""
    logging.info("üîê D√âMONSTRATION - ACC√àS ADMIN")
    logging.info("-" * 50)

    try:
        # Utilise les credentials Docker (admin)
        host = get_env("MONGO_HOST", "localhost")
        port = get_env("MONGO_PORT", "27017")
        user = get_env("MONGO_USER", "admin")
        password = get_env("MONGO_PASSWORD", "secure_password")

        client = MongoClient(f"mongodb://{user}:{password}@{host}:{port}/?authSource=admin")
        db = client["healthcare_db"]
        collection = db["patient_records"]

        # Test complet des permissions
        count = collection.count_documents({})
        logging.info("‚úÖ ADMIN - Lecture: %d documents trouv√©s", count)

        # Insertion de test
        test_doc = {"patient_id": "ADMIN_TEST", "test_type": "admin_access", "timestamp": "2024-01-01"}
        result = collection.insert_one(test_doc)
        logging.info("‚úÖ ADMIN - √âcriture: Document ins√©r√© (ID: %s)", result.inserted_id)

        # Suppression du document de test
        collection.delete_one({"_id": result.inserted_id})
        logging.info("‚úÖ ADMIN - Suppression: Document de test supprim√©")

        # Lister les utilisateurs (admin seulement)
        try:
            users = db.command("usersInfo")
            user_count = len(users.get("users", []))
            logging.info("‚úÖ ADMIN - Gestion utilisateurs: %d utilisateurs trouv√©s", user_count)
        except OperationFailure:
            logging.warning("‚ö†Ô∏è  ADMIN - Gestion utilisateurs: Non autoris√© sur cette DB")

        client.close()
        logging.info("‚úÖ ADMIN - Toutes les op√©rations r√©ussies\n")

    except PyMongoError as e:
        logging.error("‚ùå ADMIN - Erreur: %s\n", e)


def demo_migration_access() -> None:
    """D√©monstration de l'acc√®s migration_user (readWrite)."""
    logging.info("üîÑ D√âMONSTRATION - ACC√àS MIGRATION")
    logging.info("-" * 50)

    try:
        client = create_user_client("migration_user", "migration_secure_2024")
        db = client["healthcare_db"]
        collection = db["patient_records"]

        # Test lecture
        count = collection.count_documents({})
        logging.info("‚úÖ MIGRATION - Lecture: %d documents trouv√©s", count)

        # Test √©criture (devrait r√©ussir)
        test_doc = {
            "patient_id": "MIGRATION_TEST",
            "age": "99",
            "diagnosis": "Test migration",
            "date_recorded": "2024-01-01"
        }
        result = collection.insert_one(test_doc)
        logging.info("‚úÖ MIGRATION - √âcriture: Document ins√©r√© (ID: %s)", result.inserted_id)

        # V√©rifier l'insertion
        inserted = collection.find_one({"_id": result.inserted_id})
        if inserted:
            logging.info("‚úÖ MIGRATION - V√©rification: Document retrouv√© avec succ√®s")

        # Nettoyer
        collection.delete_one({"_id": result.inserted_id})
        logging.info("‚úÖ MIGRATION - Nettoyage: Document de test supprim√©")

        client.close()
        logging.info("‚úÖ MIGRATION - Op√©rations readWrite r√©ussies\n")

    except PyMongoError as e:
        logging.error("‚ùå MIGRATION - Erreur: %s\n", e)


def demo_readonly_access() -> None:
    """D√©monstration de l'acc√®s readonly_user (read only)."""
    logging.info("üìñ D√âMONSTRATION - ACC√àS READONLY")
    logging.info("-" * 50)

    try:
        client = create_user_client("readonly_user", "readonly_secure_2024")
        db = client["healthcare_db"]
        collection = db["patient_records"]

        # Test lecture (devrait r√©ussir)
        count = collection.count_documents({})
        logging.info("‚úÖ READONLY - Lecture: %d documents trouv√©s", count)

        # Test requ√™te avec filtre
        sample_docs = list(collection.find().limit(3))
        logging.info("‚úÖ READONLY - Requ√™tes: %d √©chantillons r√©cup√©r√©s", len(sample_docs))

        # Test statistiques
        stats = db.command("dbStats")
        logging.info("‚úÖ READONLY - Stats DB: %s collections", stats.get("collections", "N/A"))

        # Test √©criture (devrait √©chouer)
        try:
            test_doc = {"patient_id": "READONLY_TEST", "test_type": "should_fail"}
            collection.insert_one(test_doc)
            logging.error("‚ùå READONLY - S√âCURIT√â: √âcriture autoris√©e (PROBL√àME!)")
        except OperationFailure:
            logging.info("‚úÖ READONLY - S√©curit√©: √âcriture bloqu√©e (correct)")

        # Test suppression (devrait √©chouer)
        try:
            collection.delete_one({"patient_id": "NONEXISTANT"})
            logging.error("‚ùå READONLY - S√âCURIT√â: Suppression autoris√©e (PROBL√àME!)")
        except OperationFailure:
            logging.info("‚úÖ READONLY - S√©curit√©: Suppression bloqu√©e (correct)")

        client.close()
        logging.info("‚úÖ READONLY - Acc√®s en lecture seule valid√©\n")

    except PyMongoError as e:
        logging.error("‚ùå READONLY - Erreur: %s\n", e)


def demo_healthcare_access() -> None:
    """D√©monstration de l'acc√®s healthcare_user (read limit√©)."""
    logging.info("üè• D√âMONSTRATION - ACC√àS HEALTHCARE")
    logging.info("-" * 50)

    try:
        client = create_user_client("healthcare_user", "healthcare_secure_2024")
        db = client["healthcare_db"]
        collection = db["patient_records"]

        # Test lecture basique
        count = collection.count_documents({})
        logging.info("‚úÖ HEALTHCARE - Lecture: %d documents accessibles", count)

        # Test requ√™tes cliniques typiques
        # Patients d'un certain √¢ge
        age_query = {"age": {"$gte": "65"}}
        elderly_count = collection.count_documents(age_query)
        logging.info("‚úÖ HEALTHCARE - Requ√™te √¢ge: %d patients ‚â•65 ans", elderly_count)

        # Recherche par diagnostic
        diabetes_query = {"diagnosis": {"$regex": "diabetes", "$options": "i"}}
        diabetes_count = collection.count_documents(diabetes_query)
        logging.info("‚úÖ HEALTHCARE - Requ√™te diagnostic: %d cas de diab√®te", diabetes_count)

        # Test √©criture (devrait √©chouer)
        try:
            test_doc = {"patient_id": "HEALTHCARE_TEST", "test_type": "clinical_access"}
            collection.insert_one(test_doc)
            logging.error("‚ùå HEALTHCARE - S√âCURIT√â: √âcriture autoris√©e (PROBL√àME!)")
        except OperationFailure:
            logging.info("‚úÖ HEALTHCARE - S√©curit√©: √âcriture bloqu√©e (correct)")

        client.close()
        logging.info("‚úÖ HEALTHCARE - Acc√®s clinique en lecture seule valid√©\n")

    except PyMongoError as e:
        logging.error("‚ùå HEALTHCARE - Erreur: %s\n", e)


def show_security_summary() -> None:
    """Afficher un r√©sum√© des principes de s√©curit√© d√©montr√©s."""
    logging.info("üîí R√âSUM√â DES PRINCIPES DE S√âCURIT√â")
    logging.info("=" * 60)
    logging.info("‚úÖ Principe de moindre privil√®ge appliqu√©:")
    logging.info("   ‚Ä¢ Admin: acc√®s complet (configuration/setup)")
    logging.info("   ‚Ä¢ Migration: readWrite (migration des donn√©es)")
    logging.info("   ‚Ä¢ ReadOnly: read-only (analyses/rapports)")
    logging.info("   ‚Ä¢ Healthcare: read-only limit√© (applications cliniques)")
    logging.info("")
    logging.info("‚úÖ S√©paration des responsabilit√©s:")
    logging.info("   ‚Ä¢ Chaque r√¥le a un objectif sp√©cifique")
    logging.info("   ‚Ä¢ Permissions minimales n√©cessaires")
    logging.info("   ‚Ä¢ Audit trail via logs d'acc√®s")
    logging.info("")
    logging.info("‚úÖ S√©curit√© des donn√©es m√©dicales:")
    logging.info("   ‚Ä¢ Acc√®s contr√¥l√© aux donn√©es sensibles")
    logging.info("   ‚Ä¢ Pr√©vention des modifications accidentelles")
    logging.info("   ‚Ä¢ Tra√ßabilit√© des op√©rations")
    logging.info("=" * 60)


def main() -> int:
    """Point d'entr√©e de la d√©monstration d'authentification."""
    setup_logging()

    logging.info("üöÄ D√âMONSTRATION DES NIVEAUX D'ACC√àS UTILISATEUR - OC P5")
    logging.info("Objectif: Montrer la s√©curisation des donn√©es m√©dicales")
    logging.info("=" * 80)

    # V√©rifier la connectivit√©
    try:
        admin_client = MongoClient(
            f"mongodb://{get_env('MONGO_USER', 'admin')}:{get_env('MONGO_PASSWORD', 'secure_password')}@{get_env('MONGO_HOST', 'localhost')}:{get_env('MONGO_PORT', '27017')}/?authSource=admin"
        )
        admin_client.admin.command({"ping": 1})
        admin_client.close()
        logging.info("‚úÖ Connectivit√© MongoDB v√©rifi√©e")
    except PyMongoError as e:
        logging.error("‚ùå Impossible de se connecter √† MongoDB: %s", e)
        logging.error("V√©rifiez que MongoDB est d√©marr√© et que les utilisateurs sont cr√©√©s")
        logging.error("Ex√©cutez d'abord: python src/setup_auth.py")
        return 1

    # D√©monstrations des diff√©rents acc√®s
    demo_admin_access()
    demo_migration_access()
    demo_readonly_access()
    demo_healthcare_access()

    # R√©sum√© s√©curit√©
    show_security_summary()

    logging.info("üéØ D√âMONSTRATION TERMIN√âE")
    logging.info("üìã Points cl√©s d√©montr√©s:")
    logging.info("   ‚Ä¢ Authentification par r√¥le utilisateur")
    logging.info("   ‚Ä¢ Contr√¥le d'acc√®s bas√© sur les permissions")
    logging.info("   ‚Ä¢ S√©curit√© des donn√©es m√©dicales sensibles")
    logging.info("   ‚Ä¢ Principe de moindre privil√®ge")

    return 0


if __name__ == "__main__":
    sys.exit(main())
